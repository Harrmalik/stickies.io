<div id="react-container">

</div>
<script type="text/babel">
   var Note = React.createClass({
      getInitialState() {
         return {
            editing: false
         }
      },
      componentWillMount() {
         this.style = {
            right: this.randomBetween(0, window.innerWidth - 150, 'px'),
            top: this.randomBetween(0, window.innerHeight - 150, 'px'),
            transform: 'rotate(' + this.randomBetween(-15, 15, 'deg)')
         }
      },
      componentDidUpdate() {
         if (this.state.editing) {
            this.refs.newText.focus()
            this.refs.newText.select()
         }
      },
      shouldComponentUpdate(nextProps, nextState) {
         return this.props.text !== nextProps.text || this.state !== nextState
      },
      randomBetween(x, y, s) {
         return (x + Math.ceil(Math.random() * (y-x))) + s
      },
      edit() {
         this.setState({editing: true});
      },
      remove() {
         this.props.onRemove(this.props.id);
      },
      save() {
         this.props.onChange(this.refs.newText.value, this.props.id);
         this.setState({editing: false});
      },
      renderForm() {
         return (
            <div className="note" style={this.style}>
               <textarea ref="newText" defaultValue={this.props.text}></textarea>
               <button onClick={this.save}>save</button>
            </div>
         )
      },
      rendorDisplay(){
         return (
            <div className="note" style={this.style}>
               <p>{this.props.text}</p>
               <span>
                  <button onClick={this.edit}>Edit</button>
                  <button onClick={this.remove}>X</button>
               </span>
            </div>
         )
      },
      render() {
         return (
            <ReactDraggable>
               {(this.state.editing) ? this.renderForm() : this.rendorDisplay()}
            </ReactDraggable>
         )
      }
   })

   var Board = React.createClass({
      propTypes: {
         count: function(props, propName) {
            if(typeof props[propName] !=="number") {
               return new Error("the count must be a number");
            }

            if(props[propName] > 100) {
               return new Error('Creating ' +  100 + ' notes is too many notes');
            }
         }
      },
      getInitialState() {
         return {
            notes: []
         }
      },
      componentWillMount() {
         if (this.props.count) {
            var url = `http://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`
            fetch(url)
               .then(results => results.json())
               .then(array => array[0])
               .then(text => text.split('. '))
               .then(array => array.forEach(
                  sentence => this.add(sentence)
               ))
               .catch(function(err) {
                  console.log('couldn\'t get data')
               })
         }
      },
      nextId(){
         this.uniqueId = this.uniqueId || 0
         return this.uniqueId++
      },
      add(text) {
         var notes = [
            ...this.state.notes,
            {
               id: this.nextId(),
               note: text
            }
         ]
         this.setState({notes})
      },
      update(newText, id) {
         var notes = this.state.notes.map(
            note => (note.id !== id) ? note : {...note, note:newText}
         )
         this.setState({notes})
      },
      remove(id) {
         var notes = this.state.notes.filter(note => note.id !== id);
         this.setState({notes})
      },
      eachNote(note) {
         return (<Note key={note.id} text={note.note} id={note.id} onChange={this.update} onRemove={this.remove}></Note>)
      },
      render() {
         return (
            <div className="board">
               {this.state.notes.map(this.eachNote)}
               <button onClick={() => this.add('')}>+</button>
            </div>
         )
      }
   })

   ReactDOM.render(<Board count={10}/>,
   document.getElementById('react-container'));
</script>
